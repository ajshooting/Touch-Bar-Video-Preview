name: Build and Release

on:
    push:
        tags:
            - 'v*.*.*'
    workflow_dispatch:

env:
    PRODUCT_NAME: 'Touch Bar Video Preview'
    SCHEME_NAME: 'Touch Bar Preview'
    XCODE_PROJECT: 'Touch Bar Preview/Touch Bar Preview.xcodeproj'

jobs:
    build-and-release:
        runs-on: macos-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Xcode
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Get version from tag
              id: get_version
              run: |
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                    VERSION=${GITHUB_REF#refs/tags/v}
                    echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                    echo "RELEASE_NAME=v$VERSION" >> $GITHUB_OUTPUT
                  else
                    VERSION="dev-$(date +%Y%m%d-%H%M%S)"
                    echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                    echo "RELEASE_NAME=Development Build $VERSION" >> $GITHUB_OUTPUT
                  fi

            - name: Update version in Info.plist
              run: |
                  /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.get_version.outputs.VERSION }}" "Touch Bar Preview/Touch Bar Preview/Info.plist"
                  BUILD_NUMBER=$(date +%Y%m%d%H%M)
                  /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "Touch Bar Preview/Touch Bar Preview/Info.plist"
                  /usr/libexec/PlistBuddy -c "Set :CFBundleName '${{ env.PRODUCT_NAME }}'" "Touch Bar Preview/Touch Bar Preview/Info.plist"

            - name: Build app (Intel x86_64)
              run: |
                  xcodebuild \
                    -project "${{ env.XCODE_PROJECT }}" \
                    -scheme "${{ env.SCHEME_NAME }}" \
                    -configuration Release \
                    -derivedDataPath build/ \
                    -archivePath "build/${{ env.PRODUCT_NAME }}-intel.xcarchive" \
                    PRODUCT_NAME="${{ env.PRODUCT_NAME }}" \
                    ARCHS="x86_64" \
                    VALID_ARCHS="x86_64" \
                    ONLY_ACTIVE_ARCH=NO \
                    archive

            - name: Build app (Apple Silicon arm64)
              run: |
                  xcodebuild \
                    -project "${{ env.XCODE_PROJECT }}" \
                    -scheme "${{ env.SCHEME_NAME }}" \
                    -configuration Release \
                    -derivedDataPath build/ \
                    -archivePath "build/${{ env.PRODUCT_NAME }}-arm64.xcarchive" \
                    PRODUCT_NAME="${{ env.PRODUCT_NAME }}" \
                    ARCHS="arm64" \
                    VALID_ARCHS="arm64" \
                    ONLY_ACTIVE_ARCH=NO \
                    archive

            - name: Export Intel app
              run: |
                  # Export options plist を作成
                  cat > export_options.plist << EOF
                  <?xml version="1.0" encoding="UTF-8"?>
                  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                  <plist version="1.0">
                  <dict>
                      <key>method</key>
                      <string>mac-application</string>
                      <key>destination</key>
                      <string>export</string>
                  </dict>
                  </plist>
                  EOF

                  xcodebuild \
                    -exportArchive \
                    -archivePath "build/${{ env.PRODUCT_NAME }}-intel.xcarchive" \
                    -exportPath "build/export-intel/" \
                    -exportOptionsPlist export_options.plist

            - name: Export Apple Silicon app
              run: |
                  xcodebuild \
                    -exportArchive \
                    -archivePath "build/${{ env.PRODUCT_NAME }}-arm64.xcarchive" \
                    -exportPath "build/export-arm64/" \
                    -exportOptionsPlist export_options.plist

            - name: Verify architectures
              run: |
                  echo "## Architecture Information" >> $GITHUB_STEP_SUMMARY

                  # Intel
                  INTEL_BINARY="build/export-intel/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
                  if [ -f "$INTEL_BINARY" ]; then
                    INTEL_ARCH=$(lipo -info "$INTEL_BINARY" 2>/dev/null || echo "Failed to read")
                    echo "- **Intel Build**: $INTEL_ARCH" >> $GITHUB_STEP_SUMMARY
                    echo "Intel architecture: $INTEL_ARCH"
                  fi

                  # Apple Silicon
                  ARM64_BINARY="build/export-arm64/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
                  if [ -f "$ARM64_BINARY" ]; then
                    ARM64_ARCH=$(lipo -info "$ARM64_BINARY" 2>/dev/null || echo "Failed to read")
                    echo "- **Apple Silicon Build**: $ARM64_ARCH" >> $GITHUB_STEP_SUMMARY
                    echo "Apple Silicon architecture: $ARM64_ARCH"
                  fi

            - name: Create DMG files
              run: |
                  # Intel版 DMG
                  mkdir -p "build/dmg-intel"
                  cp -R "build/export-intel/${{ env.PRODUCT_NAME }}.app" "build/dmg-intel/"
                  ln -s /Applications "build/dmg-intel/Applications"

                  hdiutil create \
                    -volname "${{ env.PRODUCT_NAME }} (Intel)" \
                    -srcfolder "build/dmg-intel" \
                    -ov \
                    -format UDZO \
                    "build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.dmg"

                  # Apple Silicon版 DMG
                  mkdir -p "build/dmg-arm64"
                  cp -R "build/export-arm64/${{ env.PRODUCT_NAME }}.app" "build/dmg-arm64/"
                  ln -s /Applications "build/dmg-arm64/Applications"

                  hdiutil create \
                    -volname "${{ env.PRODUCT_NAME }} (Apple Silicon)" \
                    -srcfolder "build/dmg-arm64" \
                    -ov \
                    -format UDZO \
                    "build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.dmg"

            - name: Create ZIP archives
              run: |
                  # Intel版 ZIP
                  cd "build/export-intel"
                  zip -r "../${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.zip" "${{ env.PRODUCT_NAME }}.app"

                  # Apple Silicon版 ZIP
                  cd "../export-arm64"
                  zip -r "../${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.zip" "${{ env.PRODUCT_NAME }}.app"

            - name: Generate release notes
              id: release_notes
              run: |
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then

                    RELEASE_NOTES=$(git log --oneline --since="1 month ago" --pretty=format:"- %s" | head -20)
                    if [ -z "$RELEASE_NOTES" ]; then
                      RELEASE_NOTES="- Bug fixes and improvements"
                    fi
                  else
                    RELEASE_NOTES="- Development build from commit $(git rev-parse --short HEAD)"
                  fi

                  cat > release_notes.md << EOF
                  ## Changes

                  $RELEASE_NOTES

                  ## Installation

                  **Choose the version for your Mac:**

                  ### For Intel Macs (x86_64)
                  - Download the file with `-intel` in the name
                  - Best for: MacBook Pro 2016-2020, iMac, Mac mini (Intel), Mac Pro

                  ### For Apple Silicon Macs (arm64) 
                  - Download the file with `-arm64` in the name
                  - Best for: MacBook Pro M1/M2/M3, MacBook Air M1/M2, iMac M1/M3, Mac mini M1/M2, Mac Studio, Mac Pro M2

                  **Installation steps:**
                  1. Download the appropriate DMG file for your Mac
                  2. Open the DMG file
                  3. Drag "Touch Bar Video Preview" to your Applications folder
                  4. Launch the app from Applications

                  ## Requirements

                  - macOS 10.12.2 or later
                  - MacBook Pro with Touch Bar

                  ## File Sizes (Approximate)

                  - **Intel version**: Smaller file size, optimized for Intel processors
                  - **Apple Silicon version**: Smaller file size, optimized for M1/M2/M3 chips

                  ## Usage

                  Simply drag and drop image files (PNG, JPEG) or video files (MP4, MOV, M4V) into the app to preview them on your Touch Bar.
                  EOF

                  echo "RELEASE_NOTES_FILE=release_notes.md" >> $GITHUB_OUTPUT

            - name: Create Release
              if: startsWith(github.ref, 'refs/tags/')
              uses: softprops/action-gh-release@v1
              with:
                  name: ${{ steps.get_version.outputs.RELEASE_NAME }}
                  body_path: ${{ steps.release_notes.outputs.RELEASE_NOTES_FILE }}
                  draft: false
                  prerelease: false
                  files: |
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.dmg
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.zip
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.dmg
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload artifacts (for manual runs)
              if: github.event_name == 'workflow_dispatch'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}
                  path: |
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.dmg
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.zip
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.dmg
                      build/${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.zip
                  retention-days: 30

            - name: Output summary
              run: |
                  echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version:** ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Product:** ${{ env.PRODUCT_NAME }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Files created:**" >> $GITHUB_STEP_SUMMARY
                  echo "  - ${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.dmg (Intel Macs)" >> $GITHUB_STEP_SUMMARY
                  echo "  - ${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-intel.zip (Intel Macs)" >> $GITHUB_STEP_SUMMARY
                  echo "  - ${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.dmg (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
                  echo "  - ${{ env.PRODUCT_NAME }}-${{ steps.get_version.outputs.VERSION }}-arm64.zip (Apple Silicon)" >> $GITHUB_STEP_SUMMARY

                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                    echo "- **Release:** Created as GitHub Release" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- **Artifacts:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
                  fi
